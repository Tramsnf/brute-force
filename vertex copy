import java.nio.*;
import javax.swing.*;
import java.lang.Math;
import static com.jogamp.opengl.GL4.*;
import com.jogamp.opengl.*;
import com.jogamp.opengl.awt.GLCanvas;
import com.jogamp.common.nio.Buffers;
import com.jogamp.opengl.GLContext;
import org.joml.*;

layout(location = 0) in vec3 position;
uniform mat4 v_matrix;
uniform mat4 p_matrix;
uniform float tf;
out vec4 varyingColor;

// only the P and V matrices are sent from the application
// time factor for animation and placement of spaceship
mat4 buildRotateX(float rad);
mat4 buildRotateY(float rad);
mat4 buildRotateZ(float rad);
mat4 buildTranslate(float x, float y, float z);

// declaration of matrix transformation utility functions
// (GLSL requires functions to be declared prior to invocation)
void main(void)
{
    float x = gl_InstanceID + tf; // value based on time factor, but different for each spaceship instance
    float a = sin(.35 * x) * 8.0; // these are the x, y, and z components for the translation, below 
    float b = sin(.52 * x) * 8.0;
    float c = sin(.70 * x) * 8.0;
    
    mat4 localRotX = buildRotateX(1.75 * x);
    mat4 localRotY = buildRotateY(1.75 * x);
    mat4 localRotZ = buildRotateZ(1.75 * x);
    mat4 localTrans = buildTranslate(a, b, c);
    
    // build the model matrix and then the model-view matrix
    mat4 newM_matrix = localTrans * localRotX * localRotY * localRotZ;
    mat4 mv_matrix = v_matrix * newM_matrix;
    
    // transform the spaceship object
    gl_Position = p_matrix * mv_matrix * vec4(position, 1.0);
    
    // calculate varying color for the spaceship object
    varyingColor = vec4(position, 1.0) * 0.5 + vec4(0.5, 0.5, 0.5, 0.5);
}

// utility function to build a translation matrix (from Chapter 3)
mat4 buildTranslate(float x, float y, float z)
{
    mat4 trans = mat4(1.0, 0.0, 0.0, 0.0,
                      0.0, 1.0, 0.0, 0.0,
                      0.0, 0.0, 1.0, 0.0,
                      x, y, z, 1.0);
    return trans;
}
